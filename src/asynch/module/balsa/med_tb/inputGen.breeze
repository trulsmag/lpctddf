;;; Breeze intermediate file (list format)
;;; Created: Wed May  2 15:56:06 2012
;;; By: tg@slmpEee (Linux)
;;; With balsa-c version: 4.0
;;; Command: balsa-c -b -I .. -I . inputGen 

;;; Imports
(import "balsa.types.builtin")
(import "balsa.types.synthesis")
(import "balsa.types.basic")
;;; Types

;;; Constants

;;; Parts
(balsa
  (procedure-decl (at 4 1 "inputGen.balsa" 0) "inputGen"
    (formal-ports (at 5 15 "inputGen.balsa" 0) 
      (param-port (at 5 15 "inputGen.balsa" 0) (idents (at 5 13 "inputGen.balsa" 0) "N") (existing-type (at 5 20 "inputGen.balsa" 0) "cardinal"))
      (type-param-port (at 6 17 "inputGen.balsa" 0) (idents (at 6 13 "inputGen.balsa" 0) "Tin"))
      (type-param-port (at 7 18 "inputGen.balsa" 0) (idents (at 7 13 "inputGen.balsa" 0) "Tout"))
      (param-port (at 8 22 "inputGen.balsa" 0) (idents (at 8 13 "inputGen.balsa" 0) "portName") (existing-type (at 8 24 "inputGen.balsa" 0) "String"))
      (port (at 9 14 "inputGen.balsa" 0) default input (idents (at 9 9 "inputGen.balsa" 0) "file") (existing-type (at 9 16 "inputGen.balsa" 0) "File"))
      (port (at 10 12 "inputGen.balsa" 0) default output (idents (at 10 10 "inputGen.balsa" 0) "o") (existing-type (at 10 14 "inputGen.balsa" 0) "Tout"))
    )
    (block (at 18 1 "inputGen.balsa" 0) 
      (decls (at 13 13 "inputGen.balsa" 0) 
        (type-decl (at 13 13 "inputGen.balsa" 0) "Ti" (numeric-type (at 13 22 "inputGen.balsa" 0) #f (unary-expr (at 13 16 "inputGen.balsa" 0) "Log" (ident-expr (at 13 20 "inputGen.balsa" 0) "N"))))
        (variable-decl (at 15 5 "inputGen.balsa" 0) (idents (at 15 14 "inputGen.balsa" 0) "line") (existing-type (at 15 21 "inputGen.balsa" 0) "String"))
        (variable-decl (at 16 5 "inputGen.balsa" 0) (idents (at 16 14 "inputGen.balsa" 0) "v") (existing-type (at 16 18 "inputGen.balsa" 0) "Tout"))
        (variable-decl (at 17 5 "inputGen.balsa" 0) (idents (at 17 14 "inputGen.balsa" 0) "i") (existing-type (at 17 18 "inputGen.balsa" 0) "Ti"))
      )
      (input-enclose (at 19 10 "inputGen.balsa" 0) 
        (lvalues (at 19 5 "inputGen.balsa" 0) 
          (channel-lvalue (at 19 5 "inputGen.balsa" 0) (ident-lvalue (at 19 5 "inputGen.balsa" 0) "file"))
        )
        (while-guards (at 20 9 "inputGen.balsa" 0) 
          (guards (at 20 39 "inputGen.balsa" 0) 
            (guard (at 20 39 "inputGen.balsa" 0) (unary-expr (at 20 20 "inputGen.balsa" 0) "Invert" (function-call-expr (at 20 32 "inputGen.balsa" 0) "FileEOF"
                  (function-params (at 20 33 "inputGen.balsa" 0) 
                    (expr-func-param (at 20 33 "inputGen.balsa" 0) (ident-expr (at 20 33 "inputGen.balsa" 0) "file"))
                  )
                )) (sequential (at 26 11 "inputGen.balsa" 0) 
                (for (at 21 13 "inputGen.balsa" 0) sequential"i" (range2 (at 21 27 "inputGen.balsa" 0) (literal-expr (at 21 25 "inputGen.balsa" 0) 0) (binary-expr (at 21 31 "inputGen.balsa" 0) "Subtract" (ident-expr (at 21 30 "inputGen.balsa" 0) "N") (literal-expr (at 21 32 "inputGen.balsa" 0) 1)))
                  (sequential (at 23 15 "inputGen.balsa" 0) 
                    (assign (at 22 22 "inputGen.balsa" 0) (ident-lvalue (at 22 17 "inputGen.balsa" 0) "line") (function-call-expr (at 22 38 "inputGen.balsa" 0) "FileReadLine"
                      (function-params (at 22 39 "inputGen.balsa" 0) 
                        (expr-func-param (at 22 39 "inputGen.balsa" 0) (ident-expr (at 22 39 "inputGen.balsa" 0) "file"))
                      )
                    ))
                    (assign (at 24 22 "inputGen.balsa" 0) (array-elem-lvalue (at 24 18 "inputGen.balsa" 0) (ident-lvalue (at 24 17 "inputGen.balsa" 0) "v") (ident-expr (at 24 19 "inputGen.balsa" 0) "i")) (function-call-expr (at 24 42 "inputGen.balsa" 0) "NumberFromString"
                      (function-params (at 24 43 "inputGen.balsa" 0) 
                        (expr-func-param (at 24 43 "inputGen.balsa" 0) (ident-expr (at 24 43 "inputGen.balsa" 0) "Tin"))
                        (expr-func-param (at 24 48 "inputGen.balsa" 0) (ident-expr (at 24 48 "inputGen.balsa" 0) "line"))
                        (expr-func-param (at 24 54 "inputGen.balsa" 0) (literal-expr (at 24 54 "inputGen.balsa" 0) 2))
                      )
                    ))
                  )
                )
                (output (at 27 15 "inputGen.balsa" 0) (ident-lvalue (at 27 13 "inputGen.balsa" 0) "o") (ident-expr (at 27 18 "inputGen.balsa" 0) "v"))
              ))
          )
        )
      )
    )
  )
)


;;; EOF
